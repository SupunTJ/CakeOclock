@page "/userdetails"
@using Microsoft.AspNetCore.Identity
@using TangyWeb_Server.Service

@inject UserService _userService
@inject IJSRuntime _jsRuntime

@attribute [Authorize]

<h3>User Details</h3>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>
                        @if (user.EmailConfirmed == true && user.PhoneNumber == null)
                        {
                            <span>Admin User</span>
                        }
                        else if (user.EmailConfirmed == true )
                        {
                            <span>Customer</span>
                        }
                        else
                        {
                            <span>Staff Member</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditUser(user.Id)" disabled="@IsAdmin(user.Email)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user.Id)" disabled="@IsAdmin(user.Email)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (isEditing)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="btn-close" @onclick="() => isEditing = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="userName" class="form-label">User Name</label>
                        <input type="text" class="form-control" id="userName" @bind="editingUser.UserName">
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" @bind="editingUser.Email">
                    </div>
                    <div class="mb-3">
                        <label for="phoneNumber" class="form-label">Phone Number</label>
                        <input type="text" class="form-control" id="phoneNumber" @bind="editingUser.PhoneNumber">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => isEditing = false">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Save changes</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (isDeleting)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="() => isDeleting = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this user?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => isDeleting = false">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<IdentityUser> users;
    private IdentityUser editingUser = new IdentityUser();
    private bool isEditing = false;
    private bool isDeleting = false;
    private string deleteUserId;

    protected override async Task OnInitializedAsync()
    {
        users = await _userService.GetUsersAsync();
    }

    private async Task EditUser(string userId)
    {
        editingUser = await _userService.GetUserByIdAsync(userId);
        isEditing = true;
    }

    private async Task DeleteUser(string userId)
    {
        deleteUserId = userId;
        isDeleting = true;
    }

    private async Task ConfirmDelete()
    {
        if (!string.IsNullOrEmpty(deleteUserId))
        {
            var success = await _userService.DeleteUserAsync(deleteUserId);
            if (success)
            {
                users = await _userService.GetUsersAsync();
                await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModel");
            }
        }
        isDeleting = false;
    }

    private async Task SaveChanges()
    {
        var success = await _userService.UpdateUserAsync(editingUser);
        if (success)
        {
            users = await _userService.GetUsersAsync();
            // await _jsRuntime.InvokeVoidAsync("HideEditUserModel");
        }
        isEditing = false;
    }

    private bool IsAdmin(string email)
    {
        return email == "admin@bakery.com";
    }
}
