@page "/summary"
@using Microsoft.AspNetCore.Authorization
@using TangyWeb_Client.Serivce.IService
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms


@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@inject IPaymentService _paymentService
@inject IOrderService _orderService
@attribute [Authorize]


@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{

    <div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">

        <div class="row p-2 my-3">
            <div class="col-12 col-lg-7 p-4">
                <div class="row px-2 text-success ">
                    <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Order Summary</p></div>
                    <div class="col-4 p-0" style="text-align:right">
                        <a href="/cart" class="btn btn-secondary btn-block">Back to cart</a>
                    </div>
                </div>

                @foreach (var prod in Order.OrderDetails)
                {

                    <div class="row border p-1 m-1">

                        <div class="col-3 col-md-2 ">
                            <img src="@prod.Product.ImageUrl" width="100%">
                        </div>
                        <div class="col-5 col-md-5 ">
                            <span class="">Product : @prod.ProductName </span><br />
                            <span class="pt-1">Size : @prod.Size</span><br />
                            <span class="pt-1">Count : @prod.Count</span><br />

                        </div>
                        <div class="col-4 col-md-5 " style="text-align:right;">
                            <h4 class="text-warning font-weight-bold pt-2">
                                LKR
                                <span style="border-bottom:1px solid #ff6a00">
                                   Rs @((prod.Count * prod.Price).ToString("N2"))
                                </span>
                            </h4>
                        </div>
                    </div>
                }
                <div class="row" style="text-align:right">
                    <div class="col-12 px-3">
                        <h3> Order Total : <span class="text-secondary">Rs @Order.OrderHeader.OrderTotal.ToString("N2")</span> </h3>
                    </div>
                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">
                <EditForm Model="Order.OrderHeader" OnValidSubmit="ConfirmOrderNow">
                    <DataAnnotationsValidator />
                    
                    <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Enter Details</p></div></div>

                    <div class="form-group pt-2">
                        <label class="text-warning">Name</label>
                        <InputText @bind-Value="Order.OrderHeader.Name" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.Name"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Phone</label>
                        <InputText @bind-Value="Order.OrderHeader.PhoneNumber" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.PhoneNumber"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Email</label>
                        <InputText @bind-Value="Order.OrderHeader.Email" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.Email"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Street Address</label>
                        <InputText @bind-Value="Order.OrderHeader.StreetAddress" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.StreetAddress"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">City</label>
                        <InputText @bind-Value="Order.OrderHeader.City" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.City"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">State</label>
                        <InputText @bind-Value="Order.OrderHeader.State" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.State"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Postal Code</label>
                        <InputText @bind-Value="Order.OrderHeader.PostalCode" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.OrderHeader.PostalCode"></ValidationMessage>
                    </div>


                    @* <div class="form-group pt-2">
                        <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                    </div> *@

                    <div class="form-group pt-2">
                        <button type="submit" class="btn btn-primary form-control" >Order Now</button>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>

}

@code {
    private OrderDTO Order { get; set; } = null;
    public bool IsProcessing { get; set; } = false;
    private IEnumerable<ProductDTO> Products { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsProcessing = true;

            List<ShoppingCart> cart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
            // if (Products == null || Order == null)
            // {
            //     cart = new List<ShoppingCart>();
            // }
            Products = await _productService.GetAll();

            Order = new()
                {
                    OrderHeader = new()
                    {
                        OrderTotal = 0,
                        Status = SD.Status_Pending
                    },
                    OrderDetails = new List<OrderDetailDTO>()
                };

            foreach (var item in cart)
            {
                ProductDTO product = Products?.FirstOrDefault(u => u.Id == item.ProductId);
                ProductPriceDTO productPrice = product?.ProductPrices?.FirstOrDefault(u => u.Id == item.ProductPriceId);

                if (product != null && productPrice != null)
                {
                    OrderDetailDTO orderDetailDTO = new()
                        {
                            ProductId = item.ProductId,
                            Size = productPrice.Size,
                            Count = item.Count,
                            Price = productPrice.Price,
                            ProductName = product.Name,
                            Product = product,
                        };

                    Order.OrderDetails.Add(orderDetailDTO);
                    Order.OrderHeader.OrderTotal += (item.Count * productPrice.Price);
                }
            }

            if (await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails) != null)
            {
                var userInfo = await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
                Order.OrderHeader.UserId = userInfo.Id;
                Order.OrderHeader.Name = userInfo.Name;
                Order.OrderHeader.Email = userInfo.Email;
                Order.OrderHeader.PhoneNumber = userInfo.PhoneNumber;
            }
        }
        catch (Exception ex)
        {
            // Handle exception here, e.g., logging or displaying an error message
            // You can also rethrow the exception if you want it to be caught elsewhere
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
        }
    }


    private async Task ConfirmOrderNow()
    {
        try
        {
            IsProcessing = true;

    
            // Update the order details or any other logic as needed
            Order.OrderHeader.Status = SD.Status_Pending;

            // Create a DTO to represent the order details if needed
            var orderDTO = new OrderDTO
                {
                    OrderHeader = Order.OrderHeader,
                    OrderDetails = Order.OrderDetails.ToList() 
                };

            var result = await _orderService.Make(orderDTO);

            await _localStorage.SetItemAsync(SD.Local_OrderDetails, result);

            // Additional logic if needed after confirming the order directly
            if(result.OrderHeader != null || result.OrderDetails != null)
            {
                await _jsRuntime.ToastrSuccess("Order Placed successfully");
                _navigationManager.NavigateTo("/orderconfirmation");
            }
            else
            {
                await _jsRuntime.ToastrFailure("Faild to Place the Order! Please fill the nessary information...!");
            }

            
        }
        catch (Exception e)
        {
            await _jsRuntime.ToastrFailure(e.Message);
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private async Task HandleCheckout()
    {
        try
        {


            IsProcessing = true;
            var paymentDto = new StripePaymentDTO()
                {
                    Order = Order
                };



            var result = await _paymentService.Checkout(paymentDto);

            Order.OrderHeader.SessionId = result.Data.ToString();

            var orderDTOSaved = await _orderService.Create(paymentDto);

            //     var StripeSessionAndPI = result.Data.ToString().Split(';');

            //     Order.OrderHeader.SessionId = StripeSessionAndPI[0];
            //     Order.OrderHeader.PaymentIntentId = StripeSessionAndPI[1];

            //

            await _localStorage.SetItemAsync(SD.Local_OrderDetails, orderDTOSaved);

            await _jsRuntime.InvokeVoidAsync("redirectToCheckout", result.Data.ToString());
        }
        catch (Exception e)
        {
            await _jsRuntime.ToastrFailure(e.Message);
        }
    }
}

